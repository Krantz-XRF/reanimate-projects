-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Animation for 3-SAT problem.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/Krantz-XRF/reanimate-projects/tree/master/3SAT#readme</a>
@package 3SAT
@version 0.1.0.0


module A3SAT.Animation.Config

-- | How do we colour the variables?
data ColourStrategy

-- | Use <a>defaultTextColour</a>.
NoColour :: ColourStrategy

-- | Use corresponding <a>varColours</a>.
VarColour :: ColourStrategy

-- | Use <a>trueColour</a> and <a>falseColour</a>. Provided the boolean
--   values for those variables.
BoolColour :: [Bool] -> ColourStrategy

-- | Configurations for the 2048 Game.
data Anim3SATConfig
Anim3SATConfig :: Texture -> Texture -> [Texture] -> ColourStrategy -> Texture -> Texture -> Anim3SATConfig
[_defaultTextColour] :: Anim3SATConfig -> Texture
[_operatorColour] :: Anim3SATConfig -> Texture
[_varColours] :: Anim3SATConfig -> [Texture]
[_colourStrategy] :: Anim3SATConfig -> ColourStrategy
[_trueColour] :: Anim3SATConfig -> Texture
[_falseColour] :: Anim3SATConfig -> Texture

-- | Classy lens for <a>Anim3SATConfig</a>.
class HasAnim3SATConfig c_agD3
anim3SATConfig :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 Anim3SATConfig
colourStrategy :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 ColourStrategy
defaultTextColour :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 Texture
falseColour :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 Texture
operatorColour :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 Texture
trueColour :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 Texture
varColours :: HasAnim3SATConfig c_agD3 => Lens' c_agD3 [Texture]

-- | Get variable colour from the <a>Anim3SATConfig</a>.
getVarColour :: HasAnim3SATConfig c => c -> Word -> Texture

-- | Get variable colour from the <a>Anim3SATConfig</a>.
getVarColours :: HasAnim3SATConfig c => c -> [Texture]

-- | Default configuration for tiles.
defaultAnim3SATConfig :: Anim3SATConfig

-- | Default variable colours.
defaultVarColours :: [Texture]
instance A3SAT.Animation.Config.HasAnim3SATConfig A3SAT.Animation.Config.Anim3SATConfig
instance GHC.Classes.Eq A3SAT.Animation.Config.ColourStrategy
instance GHC.Show.Show A3SAT.Animation.Config.ColourStrategy
instance GHC.Show.Show A3SAT.Animation.Config.Anim3SATConfig


module A3SAT.Expression

-- | The endofunctor for boolean expressions.
data ExpressionF a l
VarF :: l -> Word -> ExpressionF a l
NotF :: l -> a -> ExpressionF a l
AndF :: a -> l -> a -> ExpressionF a l
OrF :: a -> l -> a -> ExpressionF a l
ParenF :: l -> a -> l -> ExpressionF a l

-- | Given number of glyphs for variables, get the number of glyphs for
--   this element.
glyphCount :: [Int] -> ExpressionF a l -> Int

-- | Labeled Variable.
pattern LVar :: l -> Word -> LExpression l

-- | Boolean negation with label.
pattern LNot :: l -> LExpression l -> LExpression l

-- | Boolean and with label.
pattern LAnd :: LExpression l -> l -> LExpression l -> LExpression l

-- | Boolean or with label.
pattern LOr :: LExpression l -> l -> LExpression l -> LExpression l

-- | Parenthesis with left and right labels.
pattern LParen :: l -> LExpression l -> l -> LExpression l

-- | Variable with a dummy label.
pattern Var :: Word -> Expression

-- | Boolean negation with a dummy label.
pattern Not :: Expression -> Expression

-- | Boolean and with a dummy label.
pattern And :: Expression -> Expression -> Expression
infixr 3 `And`

-- | Boolean or with a dummy label.
pattern Or :: Expression -> Expression -> Expression
infixr 2 `Or`

-- | Parenthesis with dummy labels.
pattern Paren :: Expression -> Expression

-- | Boolean expressions with labels.
type LExpression = Fix ExpressionF

-- | Boolean expressions.
type Expression = LExpression ()

-- | Add necessary parentheses for the boolean expression. Parentheses
--   labeled with the provided label.
addParenWith :: (l, l) -> LExpression l -> LExpression l

-- | Add necessary parentheses for the boolean expression.
addParen :: Expression -> Expression

-- | Transform the expression with the given visitor.
mapExprM :: Applicative f => (forall a b. ExpressionF a b -> c -> f d) -> LExpression c -> f (LExpression d)

-- | Zip 2 expression functors with of same shape with given functions.
zipExprFWith :: (a -> a' -> a'') -> (l -> l' -> l'') -> (ExpressionF a l -> ExpressionF a' l' -> ExpressionF a'' l'') -> ExpressionF a l -> ExpressionF a' l' -> ExpressionF a'' l''

-- | Zip 2 expression functors of the same shape.
zipExprF :: ExpressionF a l -> ExpressionF a' l' -> ExpressionF (a, a') (l, l')

-- | Zip 2 expressions of the same shape with given function.
zipExprWith :: (l -> l' -> l'') -> (LExpression l -> LExpression l' -> LExpression l'') -> LExpression l -> LExpression l' -> LExpression l''

-- | Zip 2 expressions of the same shape with given function.
zipExpr :: LExpression l -> LExpression l' -> LExpression (l, l')
instance Data.Functor.Classes.Show2 A3SAT.Expression.ExpressionF
instance Data.Functor.Classes.Ord2 A3SAT.Expression.ExpressionF
instance Data.Functor.Classes.Eq2 A3SAT.Expression.ExpressionF
instance Data.Bitraversable.Bitraversable A3SAT.Expression.ExpressionF
instance Data.Bifoldable.Bifoldable A3SAT.Expression.ExpressionF
instance Data.Bifunctor.Bifunctor A3SAT.Expression.ExpressionF
instance Data.Traversable.Traversable (A3SAT.Expression.ExpressionF a)
instance Data.Foldable.Foldable (A3SAT.Expression.ExpressionF a)
instance GHC.Base.Functor (A3SAT.Expression.ExpressionF a)
instance (GHC.Classes.Eq l, GHC.Classes.Eq a) => GHC.Classes.Eq (A3SAT.Expression.ExpressionF a l)
instance (GHC.Show.Show l, GHC.Show.Show a) => GHC.Show.Show (A3SAT.Expression.ExpressionF a l)


module A3SAT.Expression.Lens
_ParenF :: forall a_aks5 l_aks6. Prism' (ExpressionF a_aks5 l_aks6) (l_aks6, a_aks5, l_aks6)
_OrF :: forall a_aks5 l_aks6. Prism' (ExpressionF a_aks5 l_aks6) (a_aks5, l_aks6, a_aks5)
_AndF :: forall a_aks5 l_aks6. Prism' (ExpressionF a_aks5 l_aks6) (a_aks5, l_aks6, a_aks5)
_NotF :: forall a_aks5 l_aks6. Prism' (ExpressionF a_aks5 l_aks6) (l_aks6, a_aks5)
_VarF :: forall a_aks5 l_aks6. Prism' (ExpressionF a_aks5 l_aks6) (l_aks6, Word)

-- | Prisms for <a>AndF</a> and <a>OrF</a>.
_BinOpF :: Traversal' (ExpressionF a l) (a, l, a)

-- | Label for variables matching the predicate.
varF :: (Word -> Bool) -> Traversal' (ExpressionF a l) (l, Word)

-- | Label for all variables.
allVarF :: Traversal' (ExpressionF a l) l

-- | Label for <a>NotF</a>.
notF :: Traversal' (ExpressionF a l) l

-- | Label for <a>AndF</a>.
andF :: Traversal' (ExpressionF a l) l

-- | Label for <a>OrF</a>.
orF :: Traversal' (ExpressionF a l) l

-- | Label for <a>AndF</a> and <a>OrF</a>.
binOpF :: Traversal' (ExpressionF a l) l

-- | Left parentheses.
leftParenF :: Traversal' (ExpressionF a l) l

-- | Right parentheses.
rightParenF :: Traversal' (ExpressionF a l) l

-- | Both parentheses.
parenF :: Traversal' (ExpressionF a l) l

-- | Label for variables matching the predicate.
vars :: (Word -> Bool) -> Traversal' (LExpression l) (l, Word)

-- | Label for all variables.
allVars :: Traversal' (LExpression l) l

-- | Label for <a>NotF</a>.
nots :: Traversal' (LExpression l) l

-- | Label for <a>AndF</a>.
ands :: Traversal' (LExpression l) l

-- | Label for <a>OrF</a>.
ors :: Traversal' (LExpression l) l

-- | Label for <a>AndF</a> and <a>OrF</a>.
binOps :: Traversal' (LExpression l) l

-- | Left parentheses.
leftParens :: Traversal' (LExpression l) l

-- | Right parentheses.
rightParens :: Traversal' (LExpression l) l

-- | Both parentheses.
parens :: Traversal' (LExpression l) l

-- | Travel through a parenthesis.
transParen :: Traversal' (LExpression l) (LExpression l)

-- | An <a>LExpression</a> as a product of a list of <a>LExpression</a>s.
asProduct :: Traversal' (LExpression l) (LExpression l)

-- | An <a>LExpression</a> as a sum of a list of <a>LExpression</a>s.
asSum :: Traversal' (LExpression l) (LExpression l)

-- | The "primary" label for an <a>LExpression</a>.
primaryLabel :: Lens' (LExpression l) l

-- | Make a disjoint union of 2 <a>Prism'</a>s.
disjointUnion :: Prism' s a -> Prism' s a -> Traversal' s a

-- | Fixpoint for lenses on the expression functor.
--   
--   WARNING: recursive traversal are done after non-recursive ones. Thus
--   traversal does not follow the field order in data declaration.
fixExpr :: Applicative f => (forall a. LensLike' f (ExpressionF a l) b) -> LensLike' f (LExpression l) b


module A3SAT.LaTeX

-- | Get human-readable text for a boolean expression.
prettyShow :: [Text] -> LExpression a -> Text

-- | Print human-readable text for a boolean expression to stdout.
prettyPrint :: [Text] -> LExpression a -> IO ()

-- | Get LaTeX sequence for a boolean expression.
showLaTeX :: [Text] -> LExpression a -> Text

-- | Given number of glyphs for variables, label the position of each
--   element. This function runs in a <a>State</a> monad, keeping track of
--   the total count of glyphs.
locateGlyphsM :: MonadState Int m => [Int] -> LExpression a -> m (LExpression (a, Int))

-- | Given number of glyphs for variables, label the position of each
--   element.
locateGlyphs :: [Int] -> LExpression a -> LExpression (a, Int)

-- | Given number of glyphs for variables, associate each element with its
--   glyphs. This function runs in a <a>State</a> monad, keeping track of
--   the remaining glyphs.
associateGlyphsM :: MonadState [SVG] m => [Int] -> LExpression a -> m (LExpression (a, SVG))

-- | Given number of glyphs for variables, associate each element with its
--   glyphs.
associateGlyphs :: [SVG] -> [Int] -> LExpression a -> LExpression (a, SVG)


module A3SAT.Animation.Primitives

-- | Render the boolean expression with LaTeX, then associate nodes with
--   glyphs.
showSvg :: [Text] -> LExpression l -> LExpression (l, SVG)

-- | Render the boolean expression with LaTeX, drop the original labels,
--   then associate nodes with glyphs.
showSvg' :: [Text] -> LExpression l -> LExpression SVG

-- | Modify the variables.
--   
--   <tt><a>mapVar</a> idx attrs filt upd</tt> does the following:
--   
--   <ul>
--   <li>Locate all the variables using <a>vars</a>, filtered by
--   <tt>filt</tt></li>
--   <li>Focus on the targeted parts with the given <a>Lens'</a>
--   <tt>idx</tt></li>
--   <li>Modify that part with <tt>upd</tt>, provided the corresponding
--   attribute in <tt>attrs</tt>, indexed by the <a>Word</a> index of that
--   variable</li>
--   </ul>
mapVar :: ASetter' l b -> [a] -> (Word -> Bool) -> (a -> b -> b) -> LExpression l -> LExpression l

-- | Colour the variables.
colourVar :: Lens' l SVG -> [Texture] -> LExpression l -> LExpression l

-- | Colour labels by category.
colourLabel :: ASetter' (LExpression l) SVG -> Texture -> LExpression l -> LExpression l

-- | Collect all SVGs in an expression.
exprSvg :: LExpression SVG -> SVG

-- | Perform linear morphology on already-paired-up images.
morphAnim :: LExpression (SVG, SVG) -> Animation

-- | Perform linear morphology on a pair of expressions.
morphAnimZip :: LExpression SVG -> LExpression SVG -> Animation

-- | Evaluate a boolean expression.
evalExpr :: [Bool] -> LExpression l -> Bool

-- | Evaluate a boolean expression, with its label including boolean
--   values.
evalExprIdx :: Applicative f => Lens' l (f Bool) -> LExpression l -> LExpression l

-- | Evaluate a boolean expression in an <a>Applicative</a> environment.
--   Provided a list of boolean values.
evalExprF :: Applicative f => [f Bool] -> LExpression l -> f Bool

-- | Evaluate a boolean expression in an <a>Applicative</a> environment.
--   Provided a function from labels and indices to boolean values.
evalExprWith :: Applicative f => (l -> Word -> f Bool) -> LExpression l -> f Bool

-- | Algebra <tt>ExpressionF (f Bool) l -&gt; f Bool</tt> for evaluating a
--   boolean expression.
evalExprAlg :: Applicative f => (l -> Word -> f Bool) -> ExpressionF (f Bool) l -> f Bool

-- | Bounding box for expressions.
exprBoundingBox :: LExpression SVG -> (Double, Double, Double, Double)

-- | Make a bounding rectangle for the expression.
mkBoundingRect :: LExpression SVG -> SVG


module A3SAT.Animation.Effects

-- | All animations of 3-SAT problems run in a <a>Monad3SAT</a>.
type Monad3SAT m = MonadReader Anim3SATConfig m

-- | Convert a <a>Monad3SAT</a> action to an animation.
exprAnimation :: Anim3SATConfig -> (Anim3SATConfig -> a) -> a

-- | Prepare an expression.
prepareExpr :: Monad3SAT m => [Text] -> Expression -> m (LExpression SVG)

-- | Render an expression as a static frame.
snapshotExpr :: Monad3SAT m => [Text] -> Expression -> m SVG

-- | Hold an expression static for some <a>Time</a>.
holdExpr :: Monad3SAT m => [Text] -> Expression -> Time -> m Animation

-- | Hold an expression static for some <a>Time</a>, with some
--   <a>ColourStrategy</a>.
holdExprWith :: Monad3SAT m => ColourStrategy -> [Text] -> Expression -> Time -> m Animation

-- | Highlight the variables with configured colours.
highlightVars :: Monad3SAT m => [Text] -> Expression -> m Animation

-- | Apply the <a>True</a>/<a>False</a> values, show the process.
applyBoolValue :: Monad3SAT m => [Bool] -> LExpression SVG -> m Animation
