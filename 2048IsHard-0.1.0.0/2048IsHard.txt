-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Animation for 2048 is Hard.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/Krantz-XRF/reanimate-projects/tree/master/2048IsHard#readme</a>
@package 2048IsHard
@version 0.1.0.0


module A2048.Config

-- | How do we show the labels on the tile?
data TileLabelMode
Plain :: TileLabelMode
Logarithm :: TileLabelMode
Exponent :: TileLabelMode

-- | Configurations for the 2048 Game.
data Game2048Config
Game2048Config :: Double -> Double -> Double -> [Texture] -> [Texture] -> Bool -> TileLabelMode -> Int -> Int -> Double -> Double -> Texture -> Texture -> Bool -> Double -> Game2048Config
[_tileSize] :: Game2048Config -> Double
[_tileRadius] :: Game2048Config -> Double
[_tileTextScaleRatio] :: Game2048Config -> Double
[_tileFillColour] :: Game2048Config -> [Texture]
[_tileTextColour] :: Game2048Config -> [Texture]
[_tileShowLabel] :: Game2048Config -> Bool
[_tileLabelMode] :: Game2048Config -> TileLabelMode
[_boardWidth] :: Game2048Config -> Int
[_boardHeight] :: Game2048Config -> Int
[_boardGapSize] :: Game2048Config -> Double
[_boardBorderSize] :: Game2048Config -> Double
[_boardGridColour] :: Game2048Config -> Texture
[_boardFillColour] :: Game2048Config -> Texture
[_motionFillPadding] :: Game2048Config -> Bool
[_motionDuration] :: Game2048Config -> Double

-- | Classy lens for <a>Game2048Config</a>.
class HasGame2048Config c_agwB
game2048Config :: HasGame2048Config c_agwB => Lens' c_agwB Game2048Config
boardBorderSize :: HasGame2048Config c_agwB => Lens' c_agwB Double
boardFillColour :: HasGame2048Config c_agwB => Lens' c_agwB Texture
boardGapSize :: HasGame2048Config c_agwB => Lens' c_agwB Double
boardGridColour :: HasGame2048Config c_agwB => Lens' c_agwB Texture
boardHeight :: HasGame2048Config c_agwB => Lens' c_agwB Int
boardWidth :: HasGame2048Config c_agwB => Lens' c_agwB Int
motionDuration :: HasGame2048Config c_agwB => Lens' c_agwB Double
motionFillPadding :: HasGame2048Config c_agwB => Lens' c_agwB Bool
tileFillColour :: HasGame2048Config c_agwB => Lens' c_agwB [Texture]
tileLabelMode :: HasGame2048Config c_agwB => Lens' c_agwB TileLabelMode
tileRadius :: HasGame2048Config c_agwB => Lens' c_agwB Double
tileShowLabel :: HasGame2048Config c_agwB => Lens' c_agwB Bool
tileSize :: HasGame2048Config c_agwB => Lens' c_agwB Double
tileTextColour :: HasGame2048Config c_agwB => Lens' c_agwB [Texture]
tileTextScaleRatio :: HasGame2048Config c_agwB => Lens' c_agwB Double

-- | Default configuration for tiles.
defaultGame2048Config :: Game2048Config

-- | Scale the whole game UI.
scaleGame :: Double -> Game2048Config -> Game2048Config

-- | Tile background colours.
tileBgColours :: [Texture]

-- | Tile foreground colours.
tileFgColours :: [Texture]

-- | Short-cut for tile background colour.
tileFillColourOf :: HasGame2048Config c => Int -> c -> Texture

-- | Short-cut for tile foreground colour.
tileTextColourOf :: HasGame2048Config c => Int -> c -> Texture
instance A2048.Config.HasGame2048Config A2048.Config.Game2048Config
instance GHC.Classes.Eq A2048.Config.TileLabelMode
instance GHC.Show.Show A2048.Config.TileLabelMode
instance GHC.Show.Show A2048.Config.Game2048Config


module A2048.Cache

-- | Cache ID for 2048 game scene.
data A2048CacheId
TileCache :: !Int -> !Double -> A2048CacheId
BoardBGCache :: !Int -> !Int -> !Double -> A2048CacheId
BoardStatusCache :: [[Int]] -> A2048CacheId

-- | Board background cache ID, assuming resize happens coherently.
bgCacheId :: HasGame2048Config c => c -> A2048CacheId

-- | Tile cache ID, assuming resize happens coherently.
tileCacheId :: Int -> Game2048Config -> A2048CacheId
instance Data.Hashable.Class.Hashable A2048.Cache.A2048CacheId
instance GHC.Generics.Generic A2048.Cache.A2048CacheId
instance GHC.Show.Show A2048.Cache.A2048CacheId
instance GHC.Classes.Eq A2048.Cache.A2048CacheId


module A2048.Logic

-- | Game Events, parameterised by value and position.
data GameEvent a p

-- | This tile is merged from two tiles, original positions provided.
TileMerge :: a -> p -> p -> GameEvent a p

-- | This tile is merely moving, original position provided.
TileMove :: a -> p -> GameEvent a p

-- | Placeholder, here no tile exists.
TileVanish :: GameEvent a p

-- | Merge a row, <a>Nothing</a> as empty tiles.
rowMerge :: (Eq a, Enum a) => [Maybe a] -> [GameEvent a Int]

-- | Merge a whole board, <a>Nothing</a> as empty tiles.
boardMerge :: (Eq a, Enum a) => [[Maybe a]] -> [[GameEvent a (Int, Int)]]

-- | 4 directions, for game moves.
data Direction
Left :: Direction
Right :: Direction
Up :: Direction
Down :: Direction

-- | Transform indices according to a <a>Direction</a>. This
--   <tt>addIndices</tt> pairs each element with an index:
--   
--   <pre>
--   addIndices xs =
--     [ [ (x, y, a)
--       | (x, a) &lt;- zip [0 ..] row]
--     | (y, row) &lt;- zip [0 ..] xs]
--   </pre>
--   
--   And this <tt>transIndices</tt> use <a>idxTrans</a> to transform
--   indices:
--   
--   <pre>
--   transIndices = map (map (idxTrans w h d))
--   </pre>
--   
--   Then we have the following property:
--   
--   <pre>
--   rotateTo d . addIndices == transIndices . addIndices . rotateTo d
--   </pre>
--   
--   <a>idxTrans</a> transforms the index as if it were added before a
--   <a>rotateTo</a>.
idxTrans :: Int -> Int -> Direction -> (Int, Int) -> (Int, Int)

-- | Rotate game board according to a <a>Direction</a>.
rotateTo :: Direction -> [[a]] -> [[a]]

-- | Recover from a rotated game board according to a <a>Direction</a>.
rotateFrom :: Direction -> [[a]] -> [[a]]

-- | Gather game events on a game move to a given <a>Direction</a>.
events :: Int -> Int -> Direction -> [[Int]] -> [[GameEvent Int (Int, Int)]]
instance GHC.Base.Functor (A2048.Logic.GameEvent a)
instance (GHC.Show.Show a, GHC.Show.Show p) => GHC.Show.Show (A2048.Logic.GameEvent a p)
instance GHC.Classes.Ord A2048.Logic.Direction
instance GHC.Classes.Eq A2048.Logic.Direction
instance GHC.Enum.Enum A2048.Logic.Direction
instance GHC.Show.Show A2048.Logic.Direction
instance Data.Bifunctor.Bifunctor A2048.Logic.GameEvent


module A2048.Text

-- | Plain text labels, with Source Sans Pro, Source Han fonts.
label :: Text -> SVG

-- | Coloured text labels, with Source Sans Pro, Source Han fonts.
colourLabel :: Texture -> Text -> SVG


module A2048.Tile

-- | Raw tile: coloured rounded rectangle.
rawTile :: Texture -> Double -> Double -> SVG

-- | Empty tile. Read configuration to determine size and colour.
emptyTile :: (HasGame2048Config c, MonadReader c m) => m SVG

-- | Tile with number. Read configuration to determine size and colour.
tile :: (HasGame2048Config c, MonadReader c m) => Int -> m SVG

-- | Tile number. Read configuration to determine size and colour.
tileLabel :: (HasGame2048Config c, MonadReader c m) => Int -> m SVG


module A2048.Board

-- | Game board: board = [row], row = [tile].
type Board = [[Int]]

-- | The 2048 game monad, a concrete instance for <a>Monad2048</a>
--   constraint.
type Game x = ReaderT Game2048Config (State Board) x

-- | All game actions run in a <a>Monad2048</a> monad.
type Monad2048 m = (MonadState Board m, MonadReader Game2048Config m)

-- | Position of the selected grid, pure function.
gridPos :: Game2048Config -> (Double, Double) -> (Double, Double)

-- | Translate to the selected grid, pure function.
translateGrid :: Game2048Config -> Double -> Double -> SVG -> SVG

-- | Translate to the selected grid.
translateGridM :: MonadReader Game2048Config m => Double -> Double -> m SVG -> m SVG

-- | Traverse all grids.
foreachGrid :: Monad2048 m => (Int -> m SVG) -> m [SVG]

-- | Traverse all non-empty grids.
foreachNonEmptyGrid :: Monad2048 m => (Int -> m SVG) -> m [SVG]

-- | Generate an SVG image for the empty board.
boardSVG :: Monad2048 m => m SVG

-- | Take a snapshot of the current game status.
snapshot :: Monad2048 m => m SVG

-- | Emit a static animation for the current game status.
hold :: Monad2048 m => Double -> m Animation

-- | Emit a static animation for the current game status.
holdWith :: Monad2048 m => TileLabelMode -> Double -> m Animation

-- | Convert a <a>Monad2048</a> action to an animation.
gameAnimation :: Game2048Config -> Game a -> a

-- | Make a pure <a>Animation</a> from a <a>Game</a> monad.
mkPure :: Monad2048 m => (Time -> Game a) -> m (Time -> a)


module A2048.SwitchLogarithm

-- | Create animation for each non-empty grids with the provided function.
animateGrids :: Monad2048 m => (Time -> Int -> Game SVG) -> m Animation

-- | Animation for the board from <a>Plain</a> to <a>Exponent</a>.
switchPlainExpo :: Monad2048 m => m Animation

-- | Highlight the exponents in <a>Exponent</a>.
expoHighlight :: Monad2048 m => m Animation

-- | Animation for fading the base 2 in <a>Exponent</a>.
expoFadeTwo :: Monad2048 m => m Animation

-- | Animation for moving the exponent down, forming a <a>Logarithm</a>.
expoMoveDown :: Monad2048 m => m Animation

-- | Animation for the board from <a>Exponent</a> to <a>Logarithm</a>.
switchExpoLog :: Monad2048 m => m Animation


module A2048.Motion

-- | Perform a game move to a given <a>Direction</a>.
performMove :: Monad2048 m => Direction -> m Animation

-- | Move one tile to another position.
moveTile :: Monad2048 m => Bool -> Int -> (Int, Int) -> (Int, Int) -> m Animation

-- | Emerge a tile from thin air at a given position.
emergeTile :: Monad2048 m => Int -> (Int, Int) -> m Animation

-- | Emit an animation according to a game event.
eventAnim :: Monad2048 m => (Int, Int) -> GameEvent Int (Int, Int) -> m Animation
